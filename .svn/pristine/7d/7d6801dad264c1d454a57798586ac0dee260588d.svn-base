package application;

import transportation.Flight;

import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.TreeSet;

/**
 * A database containing Flight objects. Allows adding and removing of Flight objects and
 * as well as retrieval of specific Flights by origin or flight number.
 * @author Raphael Alviz, Zain Amir, Ian Ferguson, Andy Liang, Johnathan Tsoi
 */
public class FlightDatabase {
  
  // Both data structures contain pointers to the same flight objects.
  // HashMap mapping origin to TreeSets of Flights from that origin, forming adjacency list
  // of a directed graph.
  private Map<String, Set<Flight>> flightPathDatabase;
  // HashMap mapping flight numbers to the corresponding Flights for quick access and
  // modification of individual Flights.
  private Map<String, Flight> flightDatabase;

  /**
   * Creates a new empty FlightDatabase.
   */
  public FlightDatabase() {
    flightPathDatabase = new HashMap<String, Set<Flight>>();
    flightDatabase = new HashMap<String, Flight>();
  }
  
  /**
   * Creates a new FlightDatabase containing given Flights.
   * @param flights An array of Flights to be added to the FlightDatabase.
   */
  public FlightDatabase(Flight[] flights) {
    flightPathDatabase = new HashMap<String, Set<Flight>>();
    flightDatabase = new HashMap<String, Flight>();
    this.addFlight(flights);
  }
  
  /**
   * Adds a Flight to be stored in the FlightDatabase. If Flight with given flight number
   * is already in the FlightDatabase then no change will occur.
   * @param flight The Flight to be added to the FlightDatabase.
   */
  public void addFlight(Flight flight) {
    if (!flightDatabase.containsKey(flight.getFlightNumber())) {
      // Add the Flight to the flightDatabase with flight number as its key.
      flightDatabase.put(flight.getFlightNumber(), flight);
      
      String origin = flight.getOrigin();
      String destination = flight.getDestination();
      // Check if flights are already leaving from the given Flights origin.
      if (flightPathDatabase.containsKey(origin)) {
        flightPathDatabase.get(origin).add(flight);
      } else {
        // If not create new TreeSet of Flights from that origin.
        flightPathDatabase.put(origin, new TreeSet<Flight>());
        flightPathDatabase.get(origin).add(flight);
      }
      // Check if destination is in the HashMap, if not add it to the adjacency list with
      // empty set of flights leaving from it.
      if (!flightPathDatabase.containsKey(destination)) {
        flightPathDatabase.put(destination, new TreeSet<Flight>());
      }
    }
  }
  
  /**
   * Adds a Flight to be stored in the FlightDatabase. If Flight with given flight number
   * is already in the FlightDatabase then no change will occur.
   * @param departureTime The departure time of the Flight to be created.
   * @param arrivalTime The arrival time of the Flight to be created.
   * @param origin The name of the city from which the Flight originates.
   * @param destination The name of the destination city of the Flight.
   * @param cost The cost of the Flight.
   * @param flightNumber The unique flight number associated with the Flight
   * @param airline The name of the airline of the Flight to be created.
   */
  public void addFlight(String departureTime, String arrivalTime, String origin, String
      destination, double cost, String flightNumber, String airline) {
    Flight flight = new Flight(departureTime, arrivalTime, origin, destination, cost,
        flightNumber, airline);
    this.addFlight(flight);
    }
  
  /**
   * Adds all Flight objects from a given array of Flights. If a given Flight in the array
   * has a flight number already in the FlightDatabase then that Flight will not be added.
   * @param flights An array of Flight objects to be added to the FlightDatabase.
   */
  public void addFlight(Flight[] flights) {
    for (Flight flight : flights) {
      this.addFlight(flight);
    }
  }
  
  /**
   * Removes the given Flight from the FlightDatabase, if the Flight is not in the
   * FlightDatabase then removeFlight does nothing.
   * @param flight The Flight to be removed from the Flight database.
   */
  public void removeFlight(Flight flight) {
    if (flightDatabase.containsKey(flight.getFlightNumber())) {
      flightDatabase.remove(flight.getFlightNumber());
      flightPathDatabase.get(flight.getOrigin()).remove(flight);
    }
  }
  
  /**
   * Removes the given Flight from the FlightDatabase, if the Flight is not in the
   * FlightDatabase then removeFlight does nothing.
   * @param flightNumber The flight number of the Flight to be removed from the 
   * FlightDatabase.
   */
  public void removeFlight(String flightNumber) {
    if (flightDatabase.containsKey(flightNumber)) {
      Flight flight = flightDatabase.remove(flightNumber);
      flightPathDatabase.get(flight.getOrigin()).remove(flight);
    }
  }
  
  /**
   * Returns the Flight object corresponding to the given flight number. Returns null if no
   * Flight with the given number exists in the FlightDatabase
   * @param flightNumber The flight number of the Flight to be returned.
   * @return The Flight object with the given flight number, or null if no such Flight object
   * exists in the FlightDatabase.
   */
  public Flight getFlight(String flightNumber) {
    return flightDatabase.get(flightNumber);
  }
  
  /**
   * Returns a set of all Flights departing from a given origin city, or null if no Flights
   * depart from that city.
   * @param origin The name of the origin city for which departing Flights should be returned.
   * @return A set of all Flights departing from the given origin city, or null if no Flights
   * depart from that city..
   */
  public Set<Flight> getDepartingFlights(String origin) {
    return flightPathDatabase.get(origin);
  }
}
