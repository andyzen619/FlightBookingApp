package cs.b07.cscb07project.backEnd.application;

import cs.b07.cscb07project.backEnd.itinerary.FlightItinerary;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

/**
 * An ItinerarySort class to sort all of the FlightItinerary objects using cost
 * and travel time. Uses the merge sort algorithm to sort the lists of
 * FlightItinerary.
 * 
 * @author Zain Amir, Raphael Alviz, Ian Ferguson, Andy Liang, Johnathan Tsoi
 */
public class ItinerarySort {

  /**
   * Returns a list of flightItineraries sorted by cost of each Itinerary.
   * 
   * @param itineraries
   *          The list to sort by cost
   * @return A sorted list.
   */
  public static List<FlightItinerary> sortCost(List<FlightItinerary> itineraries) {
    if (itineraries.size() < 2) {
      return itineraries;
    } else {
      // separate the list in the middle
      int midpoint = (int) Math.floor(itineraries.size() / 2);
      // separate them into two different list to sort them
      List<FlightItinerary> listOne = itineraries.subList(0, midpoint);
      List<FlightItinerary> listTwo = itineraries.subList(midpoint, itineraries.size());
      List<FlightItinerary> sortOne = sortCost(listOne);
      List<FlightItinerary> sortTwo = sortCost(listTwo);
      // private method to sort the lists regarding costs
      return sortList(sortOne, sortTwo);
    }

  }

  /**
   * Returns the sorted list in terms of totalCost.
   * 
   * @param sortOne
   *          The first list to compare values with
   * @param sortTwo
   *          The second list to compare values with
   * @return A sorted list
   */
  private static List<FlightItinerary> sortList(List<FlightItinerary> sortOne, 
      List<FlightItinerary> sortTwo) {
    // to store the sorted list
    List<FlightItinerary> sortedList = new ArrayList<>();
    // variables to keep track
    int counter = 0;
    int size = 0;
    // loop until one of the lists is empty basically
    // using variables to see when it will be empty
    while (counter < sortOne.size() && size < sortTwo.size()) {
      if ((sortOne.get(counter)).totalCost() < (sortTwo.get(size)).totalCost()) {
        sortedList.add(sortOne.get(counter));
        counter += 1;
      } else {
        sortedList.add(sortTwo.get(size));
        size += 1;
      }
    }
    // just append the rest of the list depending what was emptied before
    if (counter == sortOne.size()) {
      List<FlightItinerary> sublist = sortTwo.subList(size, sortTwo.size());
      sortedList.addAll(sublist);
    } else {
      List<FlightItinerary> sublist = sortOne.subList(counter, sortOne.size());
      sortedList.addAll(sublist);
    }
    return sortedList;
  }

  /**
   * Returns a list of flightItineraries sorted by travel time of each
   * Itinerary.
   * 
   * @param itineraries
   *          the list to be sorted by travel time.
   * @return the sorted list.
   * @throws ParseException
   *           throws the exception if the travelTime does so
   */
  public static List<FlightItinerary> sortTravelTime(List<FlightItinerary> itineraries) {
    if (itineraries.size() < 2) {
      return itineraries;
    } else {
      // separate the list in the middle
      int midpoint = (int) Math.floor(itineraries.size() / 2);
      // separate them into two different lists to sort them
      List<FlightItinerary> listOne = itineraries.subList(0, midpoint);
      List<FlightItinerary> listTwo = itineraries.subList(midpoint, itineraries.size());
      List<FlightItinerary> sortOne = sortTravelTime(listOne);
      List<FlightItinerary> sortTwo = sortTravelTime(listTwo);
      // private method to sort the lists
      return sortListTravel(sortOne, sortTwo);
    }

  }

  /**
   * Returns the sorted list in terms of TravelTime.
   * 
   * @param sortOne
   *          the first list to compare values with
   * @param sortTwo
   *          the second list to compare values with
   * @return the sorted list
   * @throws ParseException
   *           throws an exception if travelTime does
   */
  private static List<FlightItinerary> sortListTravel(List<FlightItinerary> sortOne, 
      List<FlightItinerary> sortTwo) {
    // to store the sorted list
    List<FlightItinerary> sortedList = new ArrayList<>();
    int counter = 0;
    int size = 0;
    while (counter < sortOne.size() && size < sortTwo.size()) {
      if ((sortOne.get(counter)).totalTravelTime() < (sortTwo.get(size)).totalTravelTime()) {
        sortedList.add(sortOne.get(counter));
        counter += 1;
      } else {
        sortedList.add(sortTwo.get(size));
        size += 1;
      }
    }
    if (counter == sortOne.size()) {
      List<FlightItinerary> sublist = sortTwo.subList(size, sortTwo.size());
      sortedList.addAll(sublist);
    } else {
      List<FlightItinerary> sublist = sortOne.subList(counter, sortOne.size());
      sortedList.addAll(sublist);
    }
    return sortedList;
  }

}
